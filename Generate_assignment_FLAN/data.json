[
  {
    "question": "What are data types in Python, and why are they important?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain the difference between mutable and immutable data types in Python.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the default data type for numbers in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do you determine the data type of a variable in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between `int` and `float` data types in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Describe the `bool` data type in Python and provide examples.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the key differences between `list` and `tuple` data types in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are Python's `complex` numbers, and when might you use them?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain the difference between `str` and `bytes` data types in Python.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the significance of `NoneType` in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do Python's `set` and `frozenset` data types differ?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain how Python handles type conversion or casting.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between explicit and implicit type casting in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How does Python's `dict` data type differ from other data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between shallow copy and deep copy of data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do negative indices work in Python for sequence data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain the concept of sequence data types in Python with examples.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How does Python handle overflow with its `int` data type?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are some common methods available for the `str` data type in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What does the `isinstance()` function do in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Describe how slicing works for sequence data types in Python.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the advantages of using a `tuple` over a `list` in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Can Python variables hold multiple data types during execution? Explain.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do you create an empty set in Python, and why is it done this way?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between `is` and `==` in Python for comparing data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain how Python implements dynamic typing for variables.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between a variable's type and its value in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Why does Python have an immutable `frozenset` in addition to `set`?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the limitations of the `complex` data type in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How can you check if a variable is a specific data type in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What does the term 'duck typing' mean in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Why is it important to understand type annotations in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the use cases for the `bytes` and `bytearray` data types in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do you differentiate between `list` and `array` in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Can Python's `bool` data type be treated as an integer? Explain.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the key properties of Python's `dict` data type?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What happens if you perform operations on incompatible data types in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Why does Python allow heterogeneous data types in lists but not arrays?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the difference between `id()` and `type()` functions in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do default mutable arguments in functions relate to data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the significance of `bytes` literals in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain the difference between shallow and deep equality for Python data types.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the purpose of type hinting or annotations in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do you differentiate between `None` and `False` in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are f-strings in Python, and how do they interact with data types?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the primary differences between Python's list and NumPy's array?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What are the advantages and disadvantages of dynamically typed languages like Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "Explain the concept of `hashable` data types in Python.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How can you handle multiple input types in a single Python function? Provide an example.",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "How do data types affect memory allocation and performance in Python?",
    "clo": "Data Types",
    "type": "theory"
  },
  {
    "question": "What is the output of the following code? \n\n x = 10 \n print(type(x))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a variable is an integer, float, or string.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How do you convert a string '123' into an integer in Python? Write a code snippet to demonstrate.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Given the code: \n\n x = 10.5 \n y = int(x) \n print(y) \nWhat is the output?",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python function that accepts a list and prints the data type of each element.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you check the data type of a variable in Python? Provide an example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = '100' \n y = float(x) \n print(type(y))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a program to convert a float to an integer and then to a string.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Explain the difference between mutable and immutable data types with examples.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to swap two variables without using a temporary variable.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = None \n print(type(x))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of type casting with examples for int(), float(), and str().",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How do you create a complex number in Python? Write an example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Given the code: \n\n x = True \n y = 5 \n z = x + y \n print(z) \nWhat is the output and why?",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the immutability of a tuple.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a variable is of type list or tuple.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you use isinstance() in Python? Write an example that checks multiple data types.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python function to demonstrate the difference between str() and repr().",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Given the code: \n\n x = 'Python' \n print(x[0]) \n x[0] = 'J' \nWhat will happen when you run this code?",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you concatenate a string with an integer in Python? Provide a code example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the difference between the == operator and the is operator in Python? Provide code examples.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of a set and its unique property.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you convert a list into a tuple and vice versa? Write a code example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = [1, 2, 3] \n y = x \n y.append(4) \n print(x)",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate unpacking of a tuple.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Explain the difference between shallow and deep copy with examples.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = [1, 2, 3] \n y = x.copy() \n y.append(4) \n print(x)",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate dictionary operations like adding, deleting, and updating key-value pairs.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the difference between a list and a tuple? Provide examples.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a key exists in a dictionary.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you merge two dictionaries in Python? Provide a code example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = {1, 2, 3, 4, 5} \n x.add(3) \n print(x)",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to iterate over a dictionary and print each key-value pair.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the difference between None and 0 in Python? Provide examples.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of frozenset.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = {1, 2, 3} \n y = {3, 4, 5} \n print(x & y)",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of the ord() and chr() functions.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How do you check if a string is numeric in Python? Write a code example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = [1, 2, 3] \n y = (1, 2, 3) \n print(type(x), type(y))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of the bool() function with different values.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Explain the difference between an empty list, an empty tuple, and None in Python.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of a bytes object.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = b'Hello' \n print(type(x))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of enumerate() on a list.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = {1: 'a', 2: 'b'} \n print(type(x))",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of the zip() function.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you check if a variable is callable in Python? Write a code example.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "What is the output of the following code? \n\n x = 'Hello' \n y = [1, 2, 3] \n print(x * 2, y * 2)",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of isinstance() with a custom class and its instance.",
    "clo": "Data Types",
    "type": "code"
  },
  {
    "question": "How can you create a named tuple in Python? Provide an example program.",
    "clo": "Data Types",
    "type": "code"
  },
  {
      "question": "What is a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you create a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What are the different ways to define strings in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you concatenate strings in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is string slicing in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you access individual characters in a Python string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What does string immutability mean in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you use the len() function on strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What are escape characters in Python strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you format strings using f-strings in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the difference between single, double, and triple quotes in strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you convert a string to lowercase or uppercase?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the find() method in Python strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you split a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the strip() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you check if a string contains a substring in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What are raw strings and how are they defined?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you replace a substring in Python strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you count occurrences of a substring in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is string interpolation in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you reverse a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the difference between isdigit() and isnumeric()?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you check if a string is alphanumeric?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What does the join() method do?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you iterate over the characters in a string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you convert a string to a list in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the startswith() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the endswith() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you check the length of a string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the difference between the 'in' and 'not in' operators?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you escape quotes in Python strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What does the title() method do?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the swapcase() method in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you convert a string to a number in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the zfill() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How can you pad a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you compare two strings in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the format() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you convert a number to a string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What are string templates in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you iterate through words in a string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you center-align a string in Python?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the difference between split() and rsplit()?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you convert strings to title case?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is Unicode and how is it related to strings?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you format strings with named placeholders?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is a substring?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "How do you remove whitespace from a string?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the difference between strip(), lstrip(), and rstrip()?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "What is the maketrans() method used for?",
      "clo": "strings",
      "type": "theory"
  },
  {
      "question": "Write a Python program to concatenate two strings.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to reverse a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the length of a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if a string is a palindrome.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a string to uppercase.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to count the occurrences of a substring in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if a string contains only alphabets.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to split a string on whitespace.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to strip leading and trailing whitespace from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the index of the first occurrence of a substring in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a string starts with a given prefix.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a string ends with a given suffix.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to replace all occurrences of a substring with another substring.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find all vowels in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to count the number of words in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to reverse the words in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a string to title case.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if a string is a valid number.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a number to a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to swap the case of all characters in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to remove all punctuation from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to count the frequency of each character in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if two strings are anagrams.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the longest word in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to remove duplicate characters from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if a string is a valid email address.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to center-align a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find all substrings of a given string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove a specific character from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a string to a list of characters.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to reverse a string using recursion.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to remove all digits from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a string contains only whitespace characters.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove all non-alphabetic characters from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a string to binary (ASCII values).",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to replace all vowels in a string with '*'.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the second occurrence of a substring in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to extract all uppercase letters from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to capitalize the first letter of every word in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a string is a valid hexadecimal number.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to insert a substring at a specific index in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to count the number of uppercase and lowercase letters in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to remove duplicate words from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to replace all spaces in a string with underscores.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove all occurrences of a given substring from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a string to camel case.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to find the longest palindrome in a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a string contains only unique characters.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove all whitespace from a string.",
      "clo": "strings",
      "type": "code"
  },
  {
      "question": "What are the basic arithmetic operations in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How is the addition (+) operator used in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Explain the subtraction (-) operator in Python.",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the multiplication (*) operator?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does the division (/) operator work in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the floor division (//) operator in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle the modulus (%) operator?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the exponentiation (**) operator in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle operator precedence?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between / and // in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Can you explain the use of parentheses in arithmetic expressions?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you perform chained arithmetic operations in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What happens when arithmetic operations are performed with mixed data types?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Explain integer division in Python.",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can negative numbers be used in arithmetic operations?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the result of dividing by zero in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What does the % operator return for negative numbers?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle large integers in arithmetic operations?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What are augmented assignment operators in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you perform addition using the += operator?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Explain the use of the -= operator in arithmetic.",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What does the *= operator do in arithmetic expressions?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How is the /= operator used in arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Explain the functionality of the //= operator in Python.",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does the %= operator work in arithmetic operations?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the **= operator?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle floating-point arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Explain the issue of floating-point precision in Python.",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the math module in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you use the math module for arithmetic operations?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What are some common functions in the math module?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the math.sqrt() function used for?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can the abs() function be used in arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the pow() function in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you round numbers in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the behavior of round() with ties (e.g., 2.5)?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How is arithmetic performed with complex numbers in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is the cmath module used for in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you convert strings to numbers for arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is type casting, and why is it important in arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can the divmod() function be used for division and modulus?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you use arithmetic operators with lists and tuples?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What are arithmetic operations with sets in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How does arithmetic work with NumPy arrays in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What are arithmetic errors in Python?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you catch arithmetic errors using try-except?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "What is integer overflow, and how does Python handle it?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you use the decimal module for accurate arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "How can you use the fractions module in arithmetic?",
      "clo": "Arithmetic Operations",
      "type": "theory"
  },
  {
      "question": "Write a Python program to add two numbers and print the result.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python code snippet to subtract two numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that multiplies two numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that divides one number by another and displays the result.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the remainder when one number is divided by another.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python code snippet to calculate the floor division of two numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that calculates the result of raising one number to the power of another.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function that accepts two numbers and returns their sum.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that takes a number and returns its square.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to demonstrate the use of all basic arithmetic operators.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to find the product of a list of numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python program that checks if a number is divisible by another.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to find the average of three numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that rounds a number to 2 decimal places.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that performs integer division and handles division by zero.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to swap the values of two variables without using a third variable.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to calculate the percentage of a given total.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function to add two floating-point numbers and return the result.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that calculates the compound interest given the principal, rate, and time.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that takes two numbers as input and finds the larger of the two.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to calculate the sum of the squares of the first 10 natural numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python program that multiplies all elements of a list by a given factor.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program that converts a number from Fahrenheit to Celsius using arithmetic.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to compute the absolute difference between two numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that calculates the area of a rectangle.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to calculate the perimeter of a circle given its radius.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to demonstrate the use of the += operator with numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that calculates the cube of a given number.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to find the modulus of a number with respect to a divisor.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to round a number to the nearest integer using round().",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function that demonstrates the use of the -= operator.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to calculate the floor of a floating-point division.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to add a list of numbers using a for loop.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to find the maximum of two numbers using arithmetic comparison.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to find the area of a triangle given its base and height.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to demonstrate how to use the //= operator.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python program to perform a basic calculator operation (add, subtract, multiply, divide).",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to compute the sum of all even numbers up to 100.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that returns the average of a list of numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to solve the quadratic equation ax^2 + bx + c = 0 using arithmetic.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to find the result of a number raised to the power of 3 using **.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to find the square root of a number using the math module.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to calculate the total price after applying a discount to an item.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to demonstrate operator precedence using parentheses.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to convert a given number of seconds into hours and minutes.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to demonstrate the use of arithmetic operators with complex numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write Python code to demonstrate arithmetic with floating-point numbers.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to calculate the sum of a series of numbers using a while loop.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function to perform division and handle the ZeroDivisionError exception.",
      "clo": "Arithmetic Operations",
      "type": "code"
  },
  {
      "question": "What are logical operators in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the 'and' logical operator in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How does the 'or' logical operator work in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the function of the 'not' logical operator in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How do logical operators handle truthy and falsy values?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain short-circuiting behavior with logical operators.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be used with non-Boolean values in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Describe the precedence of logical operators in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How does the 'and' operator differ from the 'or' operator?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain how nested logical operations are evaluated in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the result of 'True and False' in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the result of 'True or False' in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain how the 'not' operator negates a condition in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle multiple 'and' operators in one expression?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle multiple 'or' operators in one expression?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What happens if you mix 'and' and 'or' operators in an expression?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the purpose of parentheses in logical operations?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be used to control flow in Python programs?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain how 'and' returns the first falsy value or the last truthy value.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain how 'or' returns the first truthy value or the last falsy value.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What are the differences between bitwise and logical operators?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be used with collections like lists in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How are chained logical comparisons handled in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be used with custom objects in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the result of 'not (True and False)'?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the result of 'not (True or False)'?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the truth table for 'and' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the truth table for 'or' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the truth table for 'not' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How does Python evaluate expressions with mixed logical and relational operators?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the use of logical operators in conditional statements?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be overloaded in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How do logical operators work with default parameter values?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is lazy evaluation in the context of logical operations?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What happens if 'None' is used with logical operators?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the result of 'False and True' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the result of 'False or True' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What does 'not None' evaluate to in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can you use logical operators in lambda functions?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How do logical operators behave with strings in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How do logical operators behave with integers in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Can logical operators be chained in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How can logical operators be used in list comprehensions?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'if' conditions and logical expressions?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain the behavior of 'not (False and True)' in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How do logical operators help in data validation?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How are logical operators used in exception handling?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Explain how to simplify complex logical expressions in Python.",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How can logical operators be used in loops?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "How are logical operators used in assertions in Python?",
      "clo": "Logical Operations",
      "type": "theory"
  },
  {
      "question": "Write a Python program that demonstrates the use of 'and' and 'or' operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that returns True if both inputs are True using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python script that checks if a number is between 10 and 20 using 'and' operator.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate the behavior of the 'not' operator in Python.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a Python function that checks if at least one element in a list is True using 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that simulates a simple login system using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to evaluate the expression 'True and not False'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write code to check if a given string is not empty using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a function that returns 'Valid' if a number is both positive and even.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to combine multiple conditions using 'and' and 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a program that demonstrates the short-circuit behavior of 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to evaluate if two conditions are both False.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate how parentheses affect logical operator precedence.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to check if a number is either negative or greater than 100.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a simple calculator using 'and', 'or', and 'not' operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to demonstrate the result of 'not (True or False)'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that returns the first truthy value from a list using 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that validates user input using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to show how logical operators handle None values.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a function that checks if a number is between two given values using 'and'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that returns False if either of two numbers is zero.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python script to demonstrate the behavior of 'not' with different data types.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to evaluate 'False or not True'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python function that checks multiple conditions in a loop using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program that demonstrates lazy evaluation with 'and' and 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a function to find the maximum of two numbers using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to determine if a list contains both positive and negative numbers.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a program that checks multiple boolean flags using 'and' and 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that returns True if a string is both alphabetic and uppercase.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program to show the precedence of 'and' over 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a Python function to toggle a boolean variable using 'not'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program that checks if two lists share any common elements using 'or'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to simulate a simple access control using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a function that checks if a string starts with a vowel and ends with a consonant.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to check if all values in a list are truthy.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program to demonstrate 'if not' conditions in Python.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a function that returns 'Success' if both inputs are True.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to evaluate nested logical expressions.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function that returns 'Valid' if a string contains both letters and numbers.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python program that demonstrates chained logical conditions.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program that simulates a simple quiz using logical operators for answers.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a function to check if a string is not empty and has no spaces using 'and'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a program that demonstrates logical operations in list comprehensions.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function that uses 'or' to provide a default value if input is None.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if two conditions are mutually exclusive using 'and'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Create a Python script that simulates a traffic light system using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function that returns the logical opposite of its input using 'not'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Write a program to evaluate the expression 'not (False and True)'.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "Implement a function that checks if all inputs are non-zero using logical operators.",
      "clo": "Logical Operations",
      "type": "code"
  },
  {
      "question": "What is the purpose of the 'print()' function in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does the 'input()' function work in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain how file I/O works in Python.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What are the different modes for opening a file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you read data from a file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Describe the use of the 'write()' method in Python.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'read()' and 'readline()' in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain how 'with open()' is used for file handling in Python.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle errors during file operations?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the role of file pointers in file operations?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you check if a file exists before reading it in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What are binary files and how are they handled in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain the concept of buffering during file operations.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the 'flush()' method in Python I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does the 'seek()' method work in file handling?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain the 'tell()' method in Python file handling.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is standard input and output in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you redirect standard output to a file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between text files and binary files?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you append data to an existing file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the role of encoding in file I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you read a file line by line using a loop in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'wb' and 'w' modes in file I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain the use of 'r+' mode in Python file handling.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can Python handle CSV files using basic I/O operations?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'truncate()' and 'close()' methods?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you change the file pointer’s position in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain the use of 'os' module functions in file I/O.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What are memory-mapped files in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle concurrent file access?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the 'json' module in Python I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you use 'pickle' to store Python objects to a file?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain synchronous and asynchronous I/O in Python.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What are the common errors during I/O operations in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle end-of-file (EOF) conditions?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the 'StringIO' class used for in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you write formatted strings to a file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between blocking and non-blocking I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you manage file permissions in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the use of 'sys.stdout' in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can Python handle multi-line input from the user?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'open()' and 'io.open()'?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain the use of 'a+' mode in Python file handling.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How does Python handle Unicode data in I/O operations?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the use of 'shutil' module for file operations?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you implement a logging system using file I/O?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the purpose of 'tempfile' module in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "How can you write binary data to a file in Python?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "What is the significance of newline characters in text files?",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Explain error handling best practices during I/O operations.",
      "clo": "Input/Output Operations",
      "type": "theory"
  },
  {
      "question": "Write a Python program to read user input and display it on the console.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to read a text file and print its contents line by line.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function that writes 'Hello, World!' to a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program to append new data to an existing text file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a function that reads a file and counts the number of words in it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to take multiple lines of input from the user and store them in a text file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program that reads a file and prints only the first 5 lines.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a Python program to copy the contents of one file to another.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function to read a binary file and print its contents as bytes.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script that reads a JSON file and prints its contents.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate how to use 'with open()' to safely handle file I/O.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads a file and converts all text to uppercase before printing it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program to read from one file and write only the lines that contain a specific word to another file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a Python script to read and display the contents of a CSV file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function to check if a file exists before attempting to open it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a script to take input from the user and save it to a new file with a timestamp in the filename.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program to count the number of lines, words, and characters in a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a function that reads and prints the last N lines of a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove all blank lines from a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program that uses the 'os' module to rename a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to read a file in chunks of 1024 bytes.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a program that reads a file and prints its contents in reverse order.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads a file and prints the frequency of each word.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to create a temporary file and write some data to it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads a binary file and converts it to hexadecimal format.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program to merge the contents of two files into a third file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a script to count how many times a specific character appears in a file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate how to handle file I/O errors using try-except blocks.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads a file and removes all punctuation from its contents.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a program to encrypt a text file by shifting each letter by a fixed number of positions.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to split a large file into smaller files of a specific size.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a program to read a file and replace all occurrences of a specific word with another word.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to read a file and sort its lines alphabetically before printing.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that checks if a file is empty or not.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a script to read from a URL and save the contents to a local file.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to zip the contents of a file using 'gzip' module.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads two files and compares their contents for equality.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to read a file and print only the lines that start with a specific letter.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that takes a filename and returns its file size in bytes.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a program that reads a binary file and counts the number of bytes in it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python script to log messages to a text file with timestamps.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate how to use 'shutil' module to copy a directory.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a function that reads a file and counts the number of vowels in it.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a script that reads a file and converts all whitespace characters to underscores.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a Python program to generate a checksum for a file’s contents.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write code to demonstrate how to handle Unicode file encoding and decoding.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Create a program to create and delete temporary files using 'tempfile' module.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "Write a script to delete all files in a directory that are older than a certain number of days.",
      "clo": "Input/Output Operations",
      "type": "code"
  },
  {
      "question": "What is a list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to create a list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to access elements of a list using indexing?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to modify elements of a list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is list slicing in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to add elements to a list using append()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to insert elements at a specific position using insert()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to extend a list using another list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to remove an element using remove()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to remove an element by index using pop()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to clear all elements of a list using clear()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to reverse a list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to sort a list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is the difference between sort() and sorted()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to copy a list using copy()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the length of a list using len()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to check for membership using 'in' keyword?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to concatenate two lists?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to repeat a list using * operator?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to iterate over a list using a for loop?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to create a list comprehension?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to filter elements using list comprehensions?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the minimum element in a list using min()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the maximum element in a list using max()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the sum of elements using sum()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to count occurrences of an element using count()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the index of an element using index()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is the difference between mutable and immutable types?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is a nested list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to access elements in a nested list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to flatten a nested list in Python?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to use the list constructor list()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to unpack lists using * operator?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to clone a list in different ways?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to convert a string to a list using split()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to convert a list to a string using join()?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to remove duplicates from a list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to merge multiple lists?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to use list slicing to reverse a list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is the difference between shallow copy and deep copy?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to use enumerate() with lists?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to zip multiple lists together?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "What is the difference between lists and tuples?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find common elements between two lists?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to handle exceptions when accessing list elements?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to multiply each element of a list by a number?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to create a list of lists (2D list)?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to use random module to shuffle a list?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "How to find the difference between two lists?",
      "clo": "Lists",
      "type": "theory"
  },
  {
      "question": "Write a Python program to create a list of numbers from 1 to 10.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How do you append an element to a list in Python? Provide an example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a program to insert an element at the second position in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a Python program to remove the first occurrence of a given element from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the index of an element in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a Python program to sort a list in ascending order.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to reverse a list using slicing.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How can you iterate over a list using a for loop? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a program that calculates the sum of all elements in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a program to count the occurrences of a specific element in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function to find the maximum element in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function to find the minimum element in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to concatenate two lists in Python? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to multiply each element of a list by 2.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a Python program to filter all even numbers from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a program that removes all duplicates from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to create a nested list in Python? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to flatten a nested list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a program to convert a string to a list using split().",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a list to a string using join().",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function that returns the length of a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to use the 'in' keyword to check membership in a list? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to reverse a list using the reverse() method.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a list comprehension that squares each number in a list of integers.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to clear all elements from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function that returns the index of a target element, or -1 if not found.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a program to merge multiple lists into a single list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to remove the element at a specific index from a list? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a program that finds the common elements between two lists.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function that takes a list and returns only the unique elements.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to find the difference between two lists? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to unpack a list using the * operator.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a list of lists (2D list) and access an element in the inner list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to use enumerate() to iterate over a list with indices? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the sum of all even numbers in a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a Python program to remove all elements greater than a given value from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to copy a list using slicing? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to shuffle the elements of a list using the random module.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a program that finds the intersection of two lists using list comprehension.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to zip two lists together in Python? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to split a list into chunks of size n.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to create a shallow copy of a list using the copy() method? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function to remove all empty strings from a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Create a program to reverse only the first half of a list.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python function to multiply corresponding elements of two lists.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "Write a Python program to clone a list in three different ways.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "How to filter out negative numbers from a list? Provide a code example.",
      "clo": "Lists",
      "type": "code"
  },
  {
      "question": "What is a tuple in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How does a tuple differ from a list in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Explain the immutability property of tuples.",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you create a tuple with a single element?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What happens if you try to modify an element in a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What are the advantages of using tuples over lists?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Can a tuple contain elements of different data types?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you access elements in a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is tuple unpacking in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Why are tuples considered hashable?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can tuples be used as keys in dictionaries?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What methods are available for tuples in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you find the index of an element in a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you count the occurrences of an element in a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the result of concatenating two tuples?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you convert a list into a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you convert a tuple into a list?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the significance of the comma in tuple creation?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How does memory allocation for tuples compare to lists?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Why might tuples be more efficient than lists for certain operations?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Can a tuple contain mutable objects?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is a nested tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How does tuple comparison work in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the purpose of using a tuple in a function return statement?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you use tuples to swap variables without a temporary variable?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the difference between a tuple and a frozen set?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How are tuples used in formatted string literals (f-strings)?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the role of tuples in function arguments and parameters?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Explain how the zip() function can be used with tuples.",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is a named tuple and how does it differ from a regular tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Why can't tuples be used as keys in dictionaries if they contain mutable elements?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the output of multiplying a tuple by an integer?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you create an empty tuple in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What are common use cases for tuples in Python programming?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you check if an element exists in a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the difference between tuples and strings in terms of immutability?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How does the immutability of tuples affect their use in multi-threaded environments?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the maximum number of elements a tuple can hold?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you slice a tuple in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What happens when you try to delete an element from a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Why are parentheses optional in tuple creation?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you reverse the elements of a tuple?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Explain how tuples can be used to return multiple values from a function.",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the data type of a tuple that contains a single string element?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How does the performance of iterating over a tuple compare to a list?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the best practice for choosing between a tuple and a list?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How can you use a tuple to protect data from modification?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "What is the role of tuples in Python's module-level constants?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "How do you handle tuples with mixed data types in operations?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Why are tuples not provided with as many methods as lists in Python?",
      "clo": "Tuples",
      "type": "theory"
  },
  {
      "question": "Write a Python program to create a tuple with integers from 1 to 5.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to access the third element of a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to concatenate two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the length of a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if an element exists in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a tuple into a list.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a list into a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to unpack a tuple into variables.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the index of an element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to count the occurrences of an element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple with a single element.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to slice a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to reverse a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if two tuples are equal.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to multiply a tuple by an integer.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a nested tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to swap two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a tuple of strings into a single string.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the maximum element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the minimum element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to sort a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple with mixed data types.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if all elements in a tuple are the same.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to remove an element from a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to compare two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple from user input.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the sum of all elements in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the product of all elements in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the average of elements in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the second largest element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the second smallest element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of even numbers from 1 to 20.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of squares of numbers from 1 to 10.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the common elements between two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the difference between two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a tuple is a subset of another tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of random numbers.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to convert a tuple of tuples into a dictionary.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to flatten a nested tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to rotate a tuple by a given number of positions.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the frequency of each element in a tuple.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of prime numbers up to 50.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the intersection of two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the union of two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to check if a tuple is empty.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of tuples from a list of lists.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the longest word in a tuple of strings.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the shortest word in a tuple of strings.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to create a tuple of Fibonacci numbers up to a given limit.",
      "clo": "Tuples",
      "type": "code"
  },
  {
      "question": "Write a Python program to find the symmetric difference between two tuples.",
      "clo": "Tuples",
      "type": "code"
  },
  {
    "question": "What is a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you create a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What are the key characteristics of sets in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you add an element to a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you remove an element from a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between a set and a list in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Can a set contain duplicate elements in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you create an empty set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you check if an element exists in a set?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the union() method in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the intersection() method in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between union() and intersection() in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How does the difference() method work in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How does the symmetric_difference() method work in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you find the length of a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is a frozen set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you create a frozen set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between a set and a frozen set?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Can a set contain mutable elements like lists or dictionaries?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you iterate over a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What happens when you try to access an element in a set using an index?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you convert a list to a set in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you convert a set to a list in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How does the issubset() method work in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How does the issuperset() method work in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between a subset and a superset?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Can you modify a frozen set after creation?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the pop() method in sets used for?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What happens if you try to remove an element that is not in the set?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the discard() method in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How does Python ensure set elements are unique?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Can a set contain another set as an element?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the update() method used for in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you clear all elements from a set?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What are the common use cases of sets in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How are sets implemented internally in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is hashability, and why is it important for set elements?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Why are sets unordered in Python?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between intersection_update() and intersection()?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between difference_update() and difference()?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the difference between symmetric_difference_update() and symmetric_difference()?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you check if two sets are disjoint?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the role of the copy() method in sets?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Why are sets useful in removing duplicates from a list?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Can a set be used as a dictionary key?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "How do you check if two sets are equal?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "What is the primary advantage of using sets over lists for membership checks?",
    "clo": "Sets",
    "type": "theory"
  },
  {
    "question": "Write a Python program to create a set and print its elements.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to add an element to a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove an element from a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if an element exists in a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to iterate through a set and print each element.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the union of two sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the intersection of two sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the difference between two sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the symmetric difference between two sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert a list to a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert a set to a list.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the length of a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a set is a subset of another set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a set is a superset of another set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to create an empty set and add elements to it.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove all elements from a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove an element from a set using discard().",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove an element from a set using pop() and observe the behavior.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if two sets are disjoint.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a frozen set and try modifying it.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to update a set with elements from another set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the intersection of multiple sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the union of multiple sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if two sets are equal.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of the copy() method in sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to find common elements between two sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to merge multiple sets using update().",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove duplicate elements from a list using a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a set of unique characters from a string.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of intersection_update() method.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of difference_update() method.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of symmetric_difference_update() method.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to filter out even numbers from a set of integers.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to filter out odd numbers from a set of integers.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a given set is empty.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a set contains any common elements with another set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate set operations using mathematical symbols.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a set and find its maximum and minimum values.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to sort a set and convert it into a list.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the behavior of set operations on immutable data types.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of a set in removing duplicates from a sentence.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to compare two sets and return the common elements.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of the isdisjoint() method.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate how set membership checking is faster than list membership checking.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert a dictionary's keys into a set.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "Write a Python program to count unique words in a text file using sets.",
    "clo": "Sets",
    "type": "code"
  },
  {
    "question": "What is a dictionary in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you create an empty dictionary in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What are the key characteristics of a Python dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you access values in a dictionary using keys?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What happens if you try to access a non-existent key in a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How can you check if a key exists in a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you add a new key-value pair to an existing dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you update the value of an existing key in a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What are dictionary keys and values?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "Can dictionary keys be mutable data types?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What data types can be used as dictionary keys?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What data types can be used as dictionary values?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you remove a key-value pair from a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How does the pop() method work in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How does the popitem() method work in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you clear all items from a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How can you copy a dictionary in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the difference between shallow and deep copies of dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What does the get() method do in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you iterate over dictionary keys and values?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the advantage of using dictionaries over lists?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "Can dictionaries maintain order in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the default behavior of dictionary iteration?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you merge two dictionaries in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the use of the items() method in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the use of the keys() method in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the use of the values() method in dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you set a default value for a key using setdefault()?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How can you create a dictionary using dictionary comprehension?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What are nested dictionaries in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you access values in a nested dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you update values in a nested dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What are dictionary views in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do dictionaries differ from JSON objects?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "Can dictionary keys be case-sensitive?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you count occurrences of elements using a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you use the collections.defaultdict in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the difference between a dictionary and an OrderedDict?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you convert a dictionary to a list of tuples?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you convert a list of tuples to a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is a dictionary comprehension and how does it work?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "Can a dictionary have duplicate keys?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What is the time complexity of dictionary operations in Python?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How do you sort a dictionary by keys or values?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "What are the best practices for using dictionaries efficiently?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How can you handle missing keys gracefully in a dictionary?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "Can dictionary values be other dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },
  {
    "question": "How does garbage collection handle dictionaries?",
    "clo": "Dictionaries",
    "type": "theory"
  },  
  {
    "question": "Write a Python program to create an empty dictionary and print it.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to add key-value pairs to a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to access values in a dictionary using a key.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a key exists in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to update the value of an existing key in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove a key-value pair from a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to iterate over a dictionary and print all keys and values.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to merge two dictionaries into one.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to get the value of a key using the get() method.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to clear all items from a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to copy a dictionary using the copy() method.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to get all keys from a dictionary using the keys() method.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to get all values from a dictionary using the values() method.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to get all key-value pairs using the items() method.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to pop an item from a dictionary using pop().",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to pop the last inserted item from a dictionary using popitem().",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to set a default value for a key using setdefault().",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a dictionary using dictionary comprehension.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to count the frequency of elements using a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if a dictionary is empty.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to sort a dictionary by keys.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to sort a dictionary by values.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert two lists into a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert a dictionary into a list of tuples.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to convert a list of tuples into a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the maximum and minimum values in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to merge multiple dictionaries.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a dictionary with default values.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a nested dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to access values in a nested dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to update a value in a nested dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove an item from a nested dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to flatten a nested dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to reverse a dictionary (swap keys and values).",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to check if two dictionaries are equal.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to find common keys between two dictionaries.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to remove duplicate values from a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to find keys with the highest values in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to filter a dictionary based on values.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to get the sum of all values in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to group dictionary items by value.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to rename a key in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a dictionary with keys as numbers and values as their squares.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to find the difference between two dictionaries.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to swap the first and last key-value pairs in a dictionary.",
    "clo": "Dictionaries",
    "type": "code"
  },
  {
    "question": "Write a Python program to generate a dictionary from a string where keys are characters and values are their frequencies.",
    "clo": "Dictionaries",
    "type": "code"
  },  
  {
      "question": "What are decorators in Python, and why are they used?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do decorators modify the behavior of functions?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the syntax for defining a decorator in Python?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How does function wrapping work in decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the '@' symbol when using decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can a decorator accept arguments? If so, how?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the difference between a function decorator and a class decorator?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How can multiple decorators be applied to a single function?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the role of `functools.wraps` in decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What happens if a decorator does not return a function?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can a decorator modify function arguments before execution?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What are some common use cases of decorators in real-world applications?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do built-in decorators like `@staticmethod` and `@classmethod` work?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is a logging decorator, and how can it be implemented?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do decorators help in enforcing authentication in web applications?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the difference between a decorator and a higher-order function?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can a decorator be applied to a class method?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How does a decorator affect function metadata like `__name__` and `__doc__`?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Why is it necessary to return the wrapper function inside a decorator?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is a decorator factory, and how does it work?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do decorators improve code reusability?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators be nested? If so, how?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What are some performance considerations when using decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is a caching decorator, and how can it be implemented?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do decorators contribute to aspect-oriented programming?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is an example of a built-in Python decorator?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators be dynamically created at runtime?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the difference between function decorators and method decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How can you use a decorator to measure function execution time?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators be applied conditionally?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is an example of using a decorator for access control?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How can decorators be used to modify return values of functions?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What are some alternatives to using decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators be used with lambda functions?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is a practical example of using decorators in Django?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the `@property` decorator?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How can decorators be used in testing frameworks?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What happens if a decorator does not return a function?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can a function have multiple decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How do decorators interact with keyword arguments of functions?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What is an example of using decorators for API request validation?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Why should `functools.wraps` be used when defining a decorator?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators be used in asynchronous functions?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "How can decorators be used in Flask for request handling?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "What are function annotations, and how do they work with decorators?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Can decorators modify class attributes?",
      "clo": "Decorators",
      "type": "theory"
  },
  {
      "question": "Write a simple Python decorator that prints 'Function executed' before calling the function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that logs the execution time of a function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that counts the number of times a function is called.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that ensures a function only runs if a given condition is met.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that converts the output of a function to uppercase.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that caches the results of a function for performance improvement.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that logs function arguments before executing the function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that retries a function execution if it fails.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that modifies the return value of a function by adding ' - Decorated'.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that restricts function execution to only once per minute.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How do you apply multiple decorators to a single function? Provide an example.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that logs function execution details (name, arguments, return value).",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that ensures a function only runs for users with a specific role.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that times a function and prints the execution duration.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that automatically converts function output to JSON format.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that delays the execution of a function by 3 seconds.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How do you use the `functools.wraps` module to preserve function metadata in decorators?",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that ensures a function runs asynchronously.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that ensures a function only accepts integer arguments.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that prevents execution of a function on weekends.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that converts the result of a function to a list if it's not already one.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that adds logging before and after function execution.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that restricts function calls to specific hours of the day.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that checks if a function's argument is a palindrome.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How do you use class decorators instead of function decorators? Provide an example.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that modifies function arguments before execution.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that ensures a function runs with a timeout of 5 seconds.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that capitalizes all string arguments passed to a function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that logs function execution time and stores it in a file.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How can a decorator accept arguments? Provide an example.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that disables a function after being called 5 times.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that ensures a function is only called by the admin user.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that rounds the output of a function to 2 decimal places.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that checks if the function arguments are all positive numbers.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that converts function output to lowercase.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How can decorators be used in Flask for request validation? Provide an example.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that limits the number of function calls per minute.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Create a decorator that dynamically changes the function behavior based on input size.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that logs function errors and exceptions.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that retries a function 3 times before raising an error.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How can decorators be used to enforce argument type checking? Provide an example.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that reverses the string output of a function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "How can you use decorators to implement API rate limiting?",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that validates email format before passing it to a function.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Implement a decorator that automatically retries a function if it raises a specific exception.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "Write a decorator that adds timestamps to function output.",
      "clo": "Decorators",
      "type": "code"
  },
  {
      "question": "What are generators in Python, and how do they differ from normal functions?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does the 'yield' keyword work in Python generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What are the key differences between generators and iterators in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Explain the advantages of using generators over lists in Python.",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do you create a simple generator function in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'return' and 'yield' in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can a generator function have multiple 'yield' statements? Explain with an example.",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What happens when a generator function reaches the end of execution?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How can you manually iterate over a generator?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the use of the 'next()' function in Python generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do generators improve memory efficiency in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What happens if you call 'next()' on a generator that has been exhausted?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How can you stop a generator function before it is fully consumed?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does Python handle state retention in generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Explain the difference between a generator function and a generator expression.",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can you use a generator inside a list comprehension? Why or why not?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What are some real-world use cases for generators in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do you convert a generator to a list in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is generator delegation, and how does the 'yield from' statement work?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can a generator function take parameters? If so, how?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What are the performance benefits of using generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does lazy evaluation work in Python generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the 'send()' method in generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does the 'close()' method work in Python generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the role of the 'throw()' method in generator functions?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do generators contribute to pipeline processing?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Is it possible to restart a generator after it has been exhausted?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the difference between 'yield' and 'yield from'?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can a generator function return a value? How is it retrieved?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is a generator expression, and how does it differ from a list comprehension?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do you handle exceptions inside a generator function?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How can you use generators to work with large datasets?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do generators help in implementing infinite sequences?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What happens when you use 'return' inside a generator function?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can generators be used to produce random numbers? How?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What are the limitations of generators in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does Python handle memory allocation for generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can generators be pickled in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the role of generators in asynchronous programming?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does the 'itertools' module relate to generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can a generator be used multiple times? Why or why not?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "What is the difference between an iterator and a generator in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "Can you use a generator function to filter data? How?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does Python's garbage collector handle generators?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How do nested generators work in Python?",
      "clo": "generators",
      "type": "theory"
  },
  {
      "question": "How does the 'contextlib' module provide a generator-based context manager?",
      "clo": "generators",
      "type": "theory"
  },
  {
    "question": "Write a generator function to yield the first 10 natural numbers.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to yield the squares of numbers from 1 to 10.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield Fibonacci numbers up to a given number.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Implement a generator function that yields prime numbers less than 100.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator that yields the characters of a string one by one.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield numbers from a list, but only if they are even.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator that yields the factorial of numbers up to a given value.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield the first 10 multiples of 5.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to simulate a countdown from a given number.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield numbers from a range, skipping every second number.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Implement a generator function that yields numbers divisible by 3 within a range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator that cycles through a given list infinitely.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function that yields the cumulative sum of numbers in a list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield numbers from two lists alternately.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function that yields reversed elements of a given list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield all the permutations of a given list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Implement a generator that reads lines from a text file one at a time.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield the first n triangular numbers.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator that yields numbers in a geometric progression.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield alternating positive and negative numbers.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator to yield words from a sentence one by one.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield numbers in reverse order from a given range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator that yields prime factors of a given number.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield the powers of 2 up to a given limit.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function that yields the digits of a number one by one.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield random numbers between a given range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function that yields palindromic numbers within a range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield common elements from two lists.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Implement a generator function to yield characters from a string in uppercase.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield all subsets of a given list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function that yields numbers divisible by both 2 and 3 in a range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator that yields the harmonic series up to a given number.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator to yield characters of a string except vowels.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield only unique elements from a list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator that yields alternating elements from two lists of the same size.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield rows of Pascal’s Triangle up to a given level.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to yield characters from a string at odd indices.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield all leap years between two given years.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator that yields all anagrams of a given word.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield all numbers that are powers of 3 within a range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator to yield elements of a list, skipping duplicates.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator function to yield the median of numbers from a stream of data.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to yield palindromic substrings of a string.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield the Cartesian product of two lists.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to yield the transpose of a 2D list.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator that yields numbers from a range, excluding multiples of 5.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Create a generator function to yield the length of each word in a sentence.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "Write a generator to yield the sum of digits of numbers in a range.",
    "clo": "generators",
    "type": "code"
  },
  {
    "question": "What is the purpose of data analysis, and why is Python commonly used for it?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Explain the role of libraries like pandas and numpy in data analysis.",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is a DataFrame in pandas, and why is it useful?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between Series and DataFrame in pandas?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are the common file formats supported by pandas for data manipulation?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is data cleaning, and why is it an essential part of data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Explain the concept of missing data and how it can be handled in Python.",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are the common methods for detecting outliers in a dataset?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the purpose of data visualization in the context of data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Explain the differences between line plots, bar charts, and scatter plots.",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is matplotlib, and how is it used for visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "How does seaborn enhance data visualization in Python compared to matplotlib?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the significance of a histogram in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the purpose of a box plot, and how is it interpreted?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are heatmaps, and when are they useful in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the purpose of using color palettes in visualizations?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the significance of labels, titles, and legends in a plot?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between static and interactive visualizations?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the role of libraries like Plotly and Bokeh in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Explain the concept of subplots and their use in data visualization.",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is a pie chart, and what are its limitations in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Why is data normalization or standardization important in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are the differences between supervised and unsupervised data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are correlation and covariance, and how do they differ?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the purpose of feature selection in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the importance of scaling data before visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is an outlier, and how does it impact data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between structured and unstructured data?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is data aggregation, and how is it useful in analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the role of groupby in pandas for data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is a pivot table, and how is it used in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between descriptive and inferential statistics?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are the common statistical measures used in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Explain the concept of a time series and its importance in data analysis.",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is data transformation, and why is it necessary?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the importance of exploratory data analysis (EDA)?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between a line plot and a scatter plot?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the role of annotations in visualizations?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the importance of choosing the right chart type for visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is a KDE plot, and how is it useful in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between bar plots and stacked bar plots?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the importance of data filtering in analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is data aggregation, and how does it simplify analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the purpose of using descriptive statistics in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the difference between data cleaning and data preprocessing?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What are some common challenges in data visualization?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the role of interactive visualizations in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "What is the significance of trend analysis in data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Why is Python considered a powerful tool for data analysis?",
    "clo": "Data Analysis and Visualization",
    "type": "theory"
  },
  {
    "question": "Write a Python program to create a pandas DataFrame from a CSV file and display the first 10 rows.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a pandas Series from a Python list and perform basic statistical operations like mean, median, and standard deviation.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to handle missing data in a pandas DataFrame by filling NaN values with the column mean.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Generate a line plot using matplotlib to visualize the trend of a numeric column over time.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a pairplot for a dataset to analyze relationships between multiple columns.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python function to compute the correlation matrix for a pandas DataFrame and visualize it using a heatmap.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a bar chart in matplotlib showing the frequency of categories in a categorical column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to merge two pandas DataFrames based on a common column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to group data in a DataFrame by a categorical column and calculate the mean of another column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a scatter plot using matplotlib to visualize the relationship between two numeric columns in a dataset.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to filter rows in a DataFrame based on a condition (e.g., values greater than a threshold).",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to plot a histogram to visualize the distribution of a numeric column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a box plot to identify outliers in a numeric column of a dataset.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to save a pandas DataFrame to a CSV file with custom column names.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python script to calculate the rolling average of a numeric column in a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python function to plot subplots with matplotlib for two or more columns in a dataset.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using Plotly, create an interactive line plot with tooltips for a dataset.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to perform one-hot encoding for a categorical column in a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python script to visualize a dataset with missing values using a heatmap in seaborn.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to concatenate two DataFrames vertically and reset the index.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using matplotlib, create a pie chart to visualize the percentage distribution of a categorical column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to calculate the cumulative sum of a numeric column in a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a violin plot to compare the distributions of a numeric column grouped by a category.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to detect and drop duplicate rows in a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python program to sort a pandas DataFrame by one or more columns.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a swarm plot to visualize the distribution of a numeric column grouped by a categorical column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to sample a subset of rows from a pandas DataFrame randomly.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python script to rename columns in a pandas DataFrame programmatically.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using matplotlib, create a stacked bar chart to visualize the breakdown of categories over a series.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to create a DataFrame from a dictionary and display its info.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to calculate the percentage change of values in a numeric column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using pandas, create a pivot table to aggregate data and display mean values.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python program to resample a time-series DataFrame by month and calculate averages.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python script to extract a specific column from a pandas DataFrame and convert it to a list.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a barplot showing the average value of a numeric column grouped by a category.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python function to detect missing values in a DataFrame and replace them with a custom value.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using matplotlib, create a grid of subplots to display multiple plots in one figure.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to export a pandas DataFrame to an Excel file.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a heatmap with annotations to show correlations between columns in a DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to apply a custom function to each row of a DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using matplotlib, create a histogram with multiple bins to visualize a numeric column.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to split a DataFrame into two based on a condition.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a jointplot to visualize the relationship between two variables with a regression line.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python function to find the unique values in a column of a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Create a Python script to create a cumulative histogram from a dataset using matplotlib.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Write a Python program to load a dataset from an online URL into a pandas DataFrame.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "Using seaborn, create a catplot to analyze multiple categories simultaneously in a dataset.",
    "clo": "Data Analysis and Visualization",
    "type": "code"
  },
  {
    "question": "What is web scraping, and why is it used in Python?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain the difference between web scraping and web crawling.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some ethical considerations to keep in mind while performing web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are the common Python libraries used for web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Describe the role of the BeautifulSoup library in web scraping.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the requests library in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is an HTTP response, and how does it relate to web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the difference between HTML parsing and XML parsing in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some challenges commonly encountered during web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How can the User-Agent header be used in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain the concept of rate-limiting and its importance in web scraping.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the purpose of a robots.txt file, and how does it affect web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the difference between static and dynamic web pages in the context of web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Why is it important to handle exceptions while scraping websites?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the role of regular expressions in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain how cookies and sessions can impact web scraping.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some methods to deal with IP blocking during web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the significance of pagination in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How does JavaScript rendering affect the process of web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are XPath and CSS selectors, and how are they used in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Why is it important to respect a website’s terms of service when scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the difference between GET and POST requests in the context of web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain the role of headers in HTTP requests during web scraping.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How can you identify the structure of a webpage for scraping purposes?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some techniques to handle anti-scraping mechanisms implemented by websites?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How do proxies help in web scraping, and what are their types?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some common data formats used to store scraped data?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain the concept of web scraping with Selenium and its advantages.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some alternative tools to Python for web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the role of the time.sleep() function in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Why is it important to check the content-type header of an HTTP response?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some strategies to scrape large datasets efficiently?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Explain the importance of data cleaning after web scraping.",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are the legal implications of web scraping, and how can you avoid them?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some challenges in scraping websites with dynamic content?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the difference between HTML tags and attributes in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the importance of response status codes in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How can you use APIs as an alternative to web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some common errors encountered during web scraping, and how can they be resolved?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is a web scraping pipeline, and how is it structured?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are the advantages and disadvantages of using headless browsers for web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How does web scraping differ from API integration in data collection?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What are some use cases of web scraping in real-world applications?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How can CAPTCHA challenges be handled in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the importance of throttling requests in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How do CSS selectors work in the context of web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Why is it necessary to test web scraping scripts before large-scale use?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "What is the significance of encoding in web scraping?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "How can you manage session cookies in web scraping using Python?",
    "clo": "Web Scraping",
    "type": "theory"
  },
  {
    "question": "Write a Python script to fetch the HTML content of a webpage using the requests library.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Using BeautifulSoup, parse the title of a webpage and print it.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to extract all the links (anchor tags) from a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Extract all image URLs from a webpage using BeautifulSoup.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to scrape all headings (h1, h2, h3, etc.) from a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to handle HTTP errors using the requests library.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use CSS selectors to extract a specific element from a webpage using BeautifulSoup.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a Python script to scrape the text content of a webpage and save it to a text file.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use the 'User-Agent' header in a web scraping request.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape data from a table on a webpage and store it in a CSV file.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to paginate through multiple pages of a website and scrape data from each page.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use regular expressions to extract specific patterns from a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape dynamic content from a website using Selenium.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use Selenium to scrape the text of a button after clicking it.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write Python code to scrape JSON data from an API endpoint.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Extract all paragraph tags from a webpage and count their occurrences.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to download images from a webpage to a local directory.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use the time.sleep() function to avoid rate-limiting while scraping.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to scrape a website that requires login using the requests library.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape product prices from an e-commerce website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use the lxml library to parse HTML and extract specific content.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to scrape and store website data in a SQLite database.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a Python script to identify and extract meta tags from a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to handle redirects while scraping a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape weather data from a weather forecasting website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use proxies in a Python web scraping script to avoid IP blocking.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape and parse data from a form submission webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to scrape data from a website with infinite scrolling using Selenium.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write Python code to extract and save data in JSON format after scraping.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape the top news headlines from a news website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to detect and handle CAPTCHA challenges in web scraping.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use XPath to extract the text of specific elements from a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to scrape and analyze product reviews from an e-commerce website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a Python script to scrape stock prices from a financial website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write code to handle and retry failed requests in a web scraping script.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use the requests-html library to scrape content rendered by JavaScript.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to extract hashtags from the HTML content of a social media page.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to throttle requests using random delays in a web scraper.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write Python code to scrape data from an RSS feed.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Extract table data from a Wikipedia page and save it as a CSV file.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape job postings from a job board website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to handle session cookies in a web scraping script.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a Python program to scrape the alt attributes of all images on a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Use Selenium to navigate to a specific webpage and scrape its title.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape and visualize data using Matplotlib or Seaborn.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to scrape a website that requires AJAX requests.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write Python code to scrape the footer section of a webpage.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Write a script to scrape exchange rates from a currency conversion website.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use threading to speed up web scraping tasks.",
    "clo": "Web Scraping",
    "type": "code"
  },
  {
    "question": "What is the difference between concurrency and parallelism in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain the Global Interpreter Lock (GIL) and its impact on concurrent programming in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are threads in Python, and how do they differ from processes?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Describe the role of the `threading` module in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is a deadlock in concurrent programming, and how can it be avoided?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain how Python’s `multiprocessing` module enables parallelism.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of a thread pool in concurrent programming?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the difference between cooperative multitasking and preemptive multitasking?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How does the `asyncio` module support concurrency in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are coroutines, and how are they implemented in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is an event loop, and how does it work in Python’s `asyncio`?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain the difference between blocking and non-blocking I/O operations in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are race conditions, and how can they be prevented in concurrent programming?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Describe the role of locks and semaphores in Python’s `threading` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the advantages of using the `concurrent.futures` module for concurrency in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How does Python’s `queue.Queue` help manage thread-safe data sharing?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the key differences between `asyncio` and `threading` in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is a process pool, and when should it be used in parallel programming?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain the difference between synchronous and asynchronous programming.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the `await` keyword in Python’s `asyncio`?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How do you handle exceptions in concurrent programs in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the difference between a CPU-bound task and an I/O-bound task?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How does the `multiprocessing` module handle data sharing between processes?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the difference between `Thread` and `Process` in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are futures, and how are they used in concurrent programming?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain how `asyncio.gather` can be used to run multiple coroutines concurrently.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is a thread-safe data structure, and why is it important?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Describe the differences between `join()` and `is_alive()` methods in Python threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the key benefits of using concurrency in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the `asyncio.run()` function in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the drawbacks of using threads for concurrency in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain how the `multiprocessing` module achieves true parallelism.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the `subprocess` module in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is cooperative multitasking, and how is it implemented in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain the role of an executor in the `concurrent.futures` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the limitations of the `asyncio` module in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the difference between `async for` and `async with` in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is thread starvation, and how can it be avoided?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How does Python’s `asyncio` module manage concurrency using coroutines?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the key differences between threads and coroutines?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain how inter-process communication (IPC) is achieved in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the `event` object in the `threading` module?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How does Python handle thread synchronization?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Explain how shared memory works in the `multiprocessing` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of the `Semaphore` object in concurrent programming?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is green threading, and how does it differ from native threads?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What are the advantages of asynchronous programming in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "What is the purpose of `asyncio.create_task()` in Python?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Describe the relationship between coroutines and event loops in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "How can Python be used for concurrent file I/O operations?",
    "clo": "Concurrent and Parallel Programming",
    "type": "theory"
  },
  {
    "question": "Write a Python program using the `threading` module to create two threads that print numbers from 1 to 5.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a program to demonstrate the use of the `Lock` class from the `threading` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python script to show how to use the `multiprocessing` module to calculate the square of a list of numbers using multiple processes.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a producer-consumer model using Python's `queue.Queue` and `threading` modules.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use the `asyncio` module to run three coroutines concurrently.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a program to show how to use `asyncio.gather` to execute multiple coroutines in parallel.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to implement a simple task queue using the `concurrent.futures.ThreadPoolExecutor`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to simulate a deadlock scenario using threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement inter-process communication using `multiprocessing.Pipe` in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program that demonstrates the use of `multiprocessing.Manager` to share a dictionary between multiple processes.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to demonstrate the use of a Semaphore to limit access to a resource in a multithreaded environment.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Use Python's `asyncio` module to implement a program that fetches data from multiple URLs concurrently.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to compare the execution time of threads and processes for a CPU-bound task.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to handle exceptions in concurrent tasks using the `concurrent.futures` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of `async for` in an asynchronous generator.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a Python script that uses the `multiprocessing.Pool` to calculate the factorial of numbers in parallel.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to implement a simple chat server using `asyncio`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python program to demonstrate thread synchronization using a `Condition` object.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python script to use `asyncio.create_task` to start multiple tasks and retrieve their results.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use the `subprocess` module to run a shell command asynchronously in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a Python script to calculate the sum of numbers in a list using threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate how to create a coroutine and run it using `asyncio.run`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to demonstrate the use of a `Barrier` for thread synchronization.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python script that demonstrates how to use `Event` objects to coordinate threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use `asyncio.Queue` to implement a producer-consumer model with coroutines.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to compute the Fibonacci sequence using both threads and processes.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to demonstrate the use of a `Timer` object in the `threading` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to implement a simple web scraper using `asyncio` and `aiohttp`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use `concurrent.futures.ProcessPoolExecutor` to perform parallel computation.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to simulate a traffic light system using threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to show how to use `Thread.join()` to ensure thread completion.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to implement a thread-safe counter using a lock in Python.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python program to demonstrate the use of `async with` for asynchronous context management.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate how to use a thread pool with the `concurrent.futures` module.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a Python script to compare the performance of sequential and concurrent file downloads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of `multiprocessing.Array` for sharing data between processes.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to use coroutines for implementing a countdown timer.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate exception handling in coroutines using `try` and `await`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a Python script to create multiple coroutines and run them sequentially using `await`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate the use of `multiprocessing.Value` for shared data between processes.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python program to simulate a bank account system using threads and locks.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Demonstrate how to use `multiprocessing.Queue` for inter-process communication.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python script to implement a progress bar for tasks using threads.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to demonstrate the use of `asyncio.Semaphore` to limit concurrent tasks.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Write a Python program to demonstrate how to schedule tasks using `asyncio.sleep`.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Implement a Python script to calculate the sum of numbers using `multiprocessing` with shared memory.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "Create a Python script to demonstrate the use of `concurrent.futures.wait` for task management.",
    "clo": "Concurrent and Parallel Programming",
    "type": "code"
  },
  {
    "question": "What is unit testing, and why is it important in software development?",
    "clo": "unit testing",
    "type": "theory"
  },
  {
    "question": "What is the Python module commonly used for unit testing?",
    "clo": "unit testing",
    "type": "theory"
  },
  {
      "question": "Explain the purpose of the unittest framework in Python.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are test cases, and how are they used in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Describe the role of assertions in unit testing.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the difference between unit testing and integration testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you create a test case class using the unittest module?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the naming convention for test methods in unittest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Explain the purpose of the setUp() and tearDown() methods in unittest.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you run all the test cases in a Python script?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are the commonly used assertion methods in unittest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is test discovery in Python unittest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Explain how to skip a test case in unittest.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are mock objects, and why are they used in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you use the patch() function in the unittest.mock module?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Describe the difference between unittest.TestCase and unittest.main().",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the assertRaises() method in unittest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you test exceptions in Python unit tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is a test suite, and how is it created in unittest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you group multiple test cases into a single test suite?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the difference between unittest and pytest in Python?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Explain how to use the @unittest.skip decorator.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are parameterized tests, and how can you implement them in Python?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you measure test coverage for Python unit tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are the best practices for writing unit tests in Python?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you mock external APIs in Python unit tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the purpose of the @patch decorator in unittest.mock?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you write unit tests for private methods in Python?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the significance of test isolation in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you test code that relies on random or time-based functions?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are edge cases, and why are they important in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Explain how to structure your Python code for better unit testability.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you test database interactions in unit tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the role of fixtures in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you test classes with multiple dependencies?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are the key differences between unittest and doctest?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you write a unit test for a function that raises a custom exception?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is test-driven development (TDD), and how does it relate to unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you debug failing unit tests in Python?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is the significance of the main() function in the unittest module?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you handle test dependencies in unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What is a flaky test, and how can it be avoided in Python unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you configure logging in unit tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What are the limitations of unit testing?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Explain how to use assertions with lists and dictionaries in unit tests.",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How can you ensure your unit tests are maintainable and readable?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "What tools can be integrated with unittest to improve test reporting?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "How do you set up and tear down resources required by multiple tests?",
      "clo": "unit testing",
      "type": "theory"
  },
  {
      "question": "Write a unit test using unittest for a function that adds two numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Create a test case class with one test method using unittest.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that calculates the factorial of a number.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that checks if a string is a palindrome.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Demonstrate how to use the setUp() and tearDown() methods in a unittest class.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test suite that combines multiple test cases.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that sorts a list of numbers in ascending order.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Demonstrate how to skip a test case in unittest using the @unittest.skip decorator.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that raises a ValueError when given invalid input.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that converts Fahrenheit to Celsius.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test using unittest.mock to mock an external API call.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a class method that calculates the area of a rectangle.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Demonstrate how to mock a database connection in a unit test.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that finds the largest number in a list.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a parameterized test using unittest for a function that checks if a number is even.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case to verify the behavior of a class initializer (__init__).",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that counts the occurrences of each character in a string.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that merges two sorted lists into one sorted list.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case that asserts two lists are equal.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case to validate exception handling in a function that divides two numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that calculates the sum of squares of a list of numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Demonstrate the use of @patch in unittest.mock to replace an object during a test.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that removes duplicates from a list.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that validates an email address format.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that generates a random number between 1 and 10.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that returns the first n Fibonacci numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Demonstrate how to use the assertRaises() method in unittest.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that calculates the greatest common divisor (GCD) of two numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case to mock and test a function that reads from a file.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that calculates the compound interest.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that checks if a string contains only alphabets.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that calculates the area of a triangle given its base and height.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a class method that returns the full name of a person given first and last names.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that reverses a string.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that checks if two strings are anagrams.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that converts a list of strings to uppercase.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a function that calculates the median of a list of numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that finds the second largest number in a list.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that generates a prime number list up to a given limit.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that converts a decimal number to binary.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that validates a password based on given rules.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case for a class method that returns the perimeter of a rectangle.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case to verify if a function correctly removes vowels from a string.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that performs matrix addition.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that determines if a year is a leap year.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test case to verify if a function correctly parses a JSON string.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that checks if a list is sorted in ascending order.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a unit test for a function that calculates the standard deviation of a list of numbers.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "Write a test for a function that merges two dictionaries.",
      "clo": "unit testing",
      "type": "code"
  },
  {
      "question": "What is code optimization, and why is it important in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are the key goals of code optimization in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the difference between time complexity and space complexity in code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain the significance of Big-O notation in Python code optimization.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some common bottlenecks in Python programs?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What tools are available in Python for profiling code performance?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does the Python Global Interpreter Lock (GIL) affect code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the role of caching in Python code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some techniques to optimize loops in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain how list comprehensions can be used to optimize Python code.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are generators, and how do they help with memory optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you use multiprocessing to optimize Python programs?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the difference between multiprocessing and multithreading in Python optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain the use of the functools.lru_cache decorator in optimizing Python functions.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some best practices for writing efficient Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does using built-in functions contribute to code optimization in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is memoization, and how does it optimize recursive functions in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you optimize file reading and writing in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is lazy evaluation, and how does it benefit Python code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the significance of avoiding redundant computations in code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain the impact of algorithm choice on Python code optimization.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does memory management affect Python code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some techniques for reducing memory usage in Python programs?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you optimize sorting operations in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the role of numpy in optimizing numerical computations in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does vectorization with libraries like numpy optimize Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some strategies for optimizing database interactions in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does the use of context managers contribute to efficient Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some common mistakes that can lead to inefficient Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain how string concatenation can be optimized in Python.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does using the join() method for strings optimize Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the impact of using global variables on Python code performance?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you optimize the use of regular expressions in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some strategies for optimizing Python functions?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does type hinting contribute to code optimization in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the role of Just-In-Time (JIT) compilers in Python optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain how compiled libraries like Cython or Numba can optimize Python code.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does using PyPy instead of CPython improve performance in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the role of asyncio in optimizing asynchronous tasks in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you optimize Python code that processes large datasets?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain the impact of modular programming on Python code optimization.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can you use decorators to optimize Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some techniques to debug and optimize slow Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How does memory profiling help in optimizing Python programs?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the role of garbage collection in Python code optimization?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What are some tips for optimizing recursive functions in Python?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Explain how to optimize dictionary operations in Python.",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "What is the impact of data structure selection on Python code performance?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "How can lazy imports optimize Python code?",
      "clo": "code optimization",
      "type": "theory"
  },
  {
      "question": "Optimize a Python function to calculate the factorial of a number using memoization.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that reads a file line by line to use a generator for memory efficiency.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function to find the sum of squares of numbers in a list and optimize it using a list comprehension.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a recursive function that calculates Fibonacci numbers using dynamic programming.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Rewrite a loop-based function that processes a list into an equivalent function using the map() function.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that concatenates multiple strings using the join() method.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Use the functools.lru_cache decorator to optimize a function that calculates the nth Fibonacci number.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that counts word frequencies in a file to use collections.Counter.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that removes duplicates from a list by converting it to a set.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Implement a function to check if a number is prime and optimize it to reduce the number of checks.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a loop-based function that multiplies elements of two lists into one using numpy.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that sorts a list of tuples by their second element using the sorted() function and a lambda.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that calculates the product of all elements in a list using functools.reduce.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that uses generators to yield square numbers up to a given number, optimizing for memory usage.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that filters even numbers from a list using the filter() function.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Rewrite a function that calculates the transpose of a matrix using list comprehensions.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a nested loop that finds common elements in two lists using set intersection.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function to process large CSV files using the csv.reader module for optimized memory usage.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates the sum of numbers from 1 to n using the arithmetic formula.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that reverses a string using slicing instead of a loop.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that processes a large dataset and uses multiprocessing for optimization.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function to use caching when fetching data from an external API.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that merges two dictionaries using dictionary unpacking.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that finds the mode of a list and optimize it using collections.Counter.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that calculates the cumulative sum of a list using itertools.accumulate.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that compresses a string using run-length encoding for optimized storage.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates the sum of all prime numbers below a given number.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function to use zip() for pairing elements from two lists.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function to flatten a nested list using recursion and optimize it for readability.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that checks for anagrams using sorted() and string comparison.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that finds the intersection of multiple lists using set operations.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that implements binary search and optimize it for readability and performance.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates matrix multiplication using numpy.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that counts vowels in a string using a set lookup for optimization.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that compresses a list of integers into a range representation and optimize it.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that checks if a list is sorted in ascending order.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that parses a JSON string to handle errors efficiently.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that calculates the GCD of two numbers using the Euclidean algorithm and optimize it.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that finds all pairs in a list that add up to a given target using a dictionary.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that generates permutations of a list using itertools.permutations.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that removes adjacent duplicates from a list and optimize it for performance.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates the median of a list of numbers.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that validates email addresses using the re module for better readability.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that checks if a string contains balanced parentheses and optimize it using a stack.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates the dot product of two vectors using numpy.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function that determines the longest increasing subsequence in a list using dynamic programming.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function to find the most common element in a list and optimize it using collections.Counter.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Optimize a function that calculates the power of a number using exponentiation by squaring.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Refactor a function to process a list of tasks using concurrent.futures for parallelism.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "Write a function that implements a custom sorting algorithm and optimize it for large inputs.",
      "clo": "code optimization",
      "type": "code"
  },
  {
      "question": "What is debugging in the context of programming?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the role of the Python Debugger (pdb) in debugging.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are breakpoints, and how are they used in debugging Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How does the traceback module assist in debugging Python programs?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the purpose of logging in debugging, and how does Python's logging module support it?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Compare and contrast debugging with testing in Python development.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can you use the 'assert' statement in Python for debugging purposes?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are the common debugging strategies for handling syntax errors in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain how debugging is performed in Integrated Development Environments (IDEs) such as PyCharm or VSCode.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is an exception in Python, and how can it help in debugging?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How does using version control systems like Git assist in debugging code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the concept of post-mortem debugging in Python.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are watch expressions in debugging, and how are they useful?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Describe the process of debugging runtime errors in Python.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can the dir() function assist in debugging attribute errors in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is a stack trace, and how is it useful for debugging Python programs?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Discuss the role of unit tests in identifying and debugging bugs in Python code.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are common debugging tools available for Python developers?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How does the REPL environment aid in debugging Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the significance of understanding variable scopes in debugging Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the process of debugging a memory leak in Python.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the role of the sys module in debugging Python scripts?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Describe how decorators can be used to debug Python functions.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can print statements help in debugging, and what are their limitations?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the difference between debugging synchronous and asynchronous Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can the contextlib module assist in debugging Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are the benefits of using conditional breakpoints in debugging Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the difference between logical errors and runtime errors in Python and their debugging approaches.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the role of the inspect module in Python debugging?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Describe how you can debug multithreaded programs in Python.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How do timeit and cProfile assist in debugging performance issues in Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are the advantages of using type hints in Python to prevent debugging issues?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How does debugging Python code differ in Jupyter Notebooks compared to standalone scripts?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the concept of defensive programming and its relation to debugging.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is a segmentation fault, and how can it occur in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can you use pytest for debugging Python tests?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the role of environment variables in debugging Python applications.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How does the Python gc module assist in debugging memory management issues?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the purpose of using mock objects in debugging Python code?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are some best practices for logging to simplify debugging in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How do you debug a program that interacts with external APIs in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Explain the concept of test-driven development and its role in debugging Python code.",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the difference between pdb and ipdb for Python debugging?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can third-party tools like Sentry help in debugging Python applications?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is remote debugging, and how can you set it up for Python applications?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can a code profiler be used to identify performance bottlenecks during debugging?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What are some common debugging techniques for dealing with Python's Global Interpreter Lock (GIL)?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "How can you debug a segmentation fault caused by a C extension in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "What is the role of assertions in defensive debugging in Python?",
      "clo": "debugging",
      "type": "theory"
  },
  {
      "question": "Write a Python program and use the pdb module to step through the execution of a function.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Insert a breakpoint in the following function and use the Python debugger to inspect variable values:\n\ndef add_numbers(a, b):\n    result = a + b\n    return result",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug the following code to identify why it raises a ZeroDivisionError:\n\ndef divide(a, b):\n    return a / b\n\ndivide(10, 0)",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Fix the following code using print statements for debugging:\n\ndef calculate_area(length, width):\n    return length * width\n\narea = calculate_area(5, '10')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use logging instead of print statements to debug the following code:\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nfactorial(5)",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Add error handling to the following code to debug and handle invalid inputs:\n\ndef parse_integer(value):\n    return int(value)\n\nparse_integer('abc')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Identify and fix the bug in this program using the Python debugger:\n\ndef greet(name):\n    return 'Hello' + name\n\ngreet()",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a Python script that uses the traceback module to print detailed error information when an exception occurs.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug the following code to identify why it does not correctly sort the list:\n\ndef sort_numbers(numbers):\n    return numbers.sort()\n\nprint(sort_numbers([3, 1, 2]))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use the inspect module to debug and print the arguments of a function at runtime.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Fix the scope-related bug in this code using debugging tools:\n\ndef increment():\n    count = count + 1\n    return count\n\nprint(increment())",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a script to debug and analyze memory usage using the gc module.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Identify the logical error in this program and fix it:\n\ndef is_even(number):\n    return number % 2 == 1\n\nprint(is_even(4))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug a KeyError in the following dictionary operation:\n\nmy_dict = {'a': 1, 'b': 2}\nprint(my_dict['c'])",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use the Python profiler (cProfile) to debug the performance of the following code:\n\ndef slow_function():\n    for _ in range(1000000):\n        pass\n\nslow_function()",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Fix the TypeError in this program:\n\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(5, '3'))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Add a try-except block to debug and handle the ValueError in this code:\n\ndef to_float(value):\n    return float(value)\n\nto_float('abc')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Identify and fix the infinite loop in the following program:\n\nwhile True:\n    print('Looping')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug the following code to identify and fix the IndexError:\n\nmy_list = [1, 2, 3]\nprint(my_list[3])",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use pdb to step through this recursive function:\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nfibonacci(5)",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a script to debug and fix the AttributeError in the following program:\n\nclass MyClass:\n    pass\n\nobj = MyClass()\nobj.name = 'Test'\nprint(obj.value)",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug the following code and handle the FileNotFoundError:\n\nwith open('non_existent_file.txt', 'r') as file:\n    print(file.read())",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use the timeit module to debug and optimize the performance of the following code:\n\ndef inefficient_function():\n    result = []\n    for i in range(1000):\n        result.append(i)\n\ninefficient_function()",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Fix the following program by debugging its off-by-one error:\n\ndef sum_to_n(n):\n    return sum(range(n))\n\nprint(sum_to_n(5))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use the logging module to debug and log variable values at different points in the following code:\n\ndef power(base, exponent):\n    return base ** exponent\n\nprint(power(2, 3))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug and fix the bug in this function that processes a list of integers:\n\ndef process_list(numbers):\n    return [num + 1 for num in numbers]\n\nprint(process_list(5))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Identify the cause of a NameError in the following program and fix it:\n\ndef greet():\n    print('Hello, ' + name)\n\ngreet()",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use pytest to debug and test this function:\n\ndef is_palindrome(word):\n    return word == word[::-1]\n\nis_palindrome('test')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug and fix the program to correctly handle the TypeError:\n\ndef add_strings(a, b):\n    return a + b\n\nprint(add_strings('abc', 123))",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Add breakpoints in a Python IDE to debug the following code:\n\ndef find_max(numbers):\n    return max(numbers)\n\nfind_max([])",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a script to debug a memory-intensive operation using the tracemalloc module.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug the following code to fix a ValueError:\n\ndef parse_date(date_string):\n    return datetime.strptime(date_string, '%Y-%m-%d')\n\nparse_date('31-12-2020')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Identify and fix the issue with a function that returns None unexpectedly:\n\ndef calculate():\n    a = 10\n\nprint(calculate())",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug a function to handle unexpected user input using Python exceptions:\n\ndef safe_divide(a, b):\n    return a / b\n\nsafe_divide(5, 'two')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Fix the UnicodeDecodeError in this program:\n\nwith open('file.txt', 'r') as f:\n    print(f.read())",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use the threading module to debug a program with concurrency issues.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a Python script to debug a web scraping program using exception handling.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug and fix the issue in the following regular expression code:\n\nimport re\nre.search('(\\d+', 'Test 123')",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Write a script to debug a Python program interacting with a database connection.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Debug and fix the issue in a program using subprocess to execute shell commands.",
      "clo": "debugging",
      "type": "code"
  },
  {
      "question": "Use a conditional breakpoint to debug a specific case in this function:\n\ndef find_index(numbers, value):\n    return numbers.index(value)\n\nfind_index([1, 2, 3, 4], 5)",
      "clo": "debugging",
      "type": "code"
  }
]